management: # spring-boot-starter-acturator 设置监控端口 监控端口和业务端口分开
  port: 9000
  
server: 
  port: 8081
  tomcat:
    uri-encoding: UTF-8
spring:
  messages:
    encoding: UTF-8 
  application:
    name: microservice-user-provider
    index: ${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}
  profiles:
    active: dev
  sleuth:
    sampler:
      percentage: 1.0
    bus:
      trace:
        enabled: true
      destination: configserver
    stream:
      default-binder: rabbit1
      rabbit: 
           bindings: 
              springCloudBusInput: 
                  consumer: 
                    durableSubscription: false
      
      bindings:
#        input:
#          destination: foo
#          binder: rabbit1
        springCloudBusInput: #consumer
          destination: configserver
          binder: rabbit1
          group: ${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}
        springCloudBusOutput: #producer
          destination: configserver
          binder: rabbit1  
      binders:
        rabbit1:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: 119.29.8.74
                port: 5672
                username: guest
                password: guest
        kafka1:
          type: kafka
          environment:
            spring:
              kafka:
                producer: 
                  bootstrap-servers:
                      - 119.29.8.74:9092

  kafka:
    producer: 
      bootstrap-servers:
          - 119.29.8.74:9092     
  zipkin:
    sender:
      type: kafka
    encoder: json-v2  
    kafka:
      topic: zipkin
      
  http:
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://119.29.8.74:3306/baoping?zeroDateTimeBehavior=convertToNull
    username: baoping
    password: baoping7890
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 10
      minIdle: 3
      maxActive: 100
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 30000
      validationQuery: select 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #useGlobalDataSourceStat: true

    
eureka:
  client:
    service-url:
      defaultZone: http://user:password123@localhost:8080/eureka
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}
    lease-renewal-interval-in-seconds: 30
    status-page-url-path: http://${spring.cloud.client.ipAddress}:${server.port}/swagger-ui.html
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      management.port: 9000
    
mybatis:
  config-location: classpath:mybatis-config.xml
  type-aliases-package: com.luckin.user.mode
  mapper-locations: classpath:mybatis/*.xml
